kind: cp.simulator/scenario:1.0.0
objective: Use badly configured database to exfiltrate data.
startingPoint:
  mode: pod
  podName: frontend
  podNamespace: network-hammer-and-anvil
tasks:
  "1":
    hints:
    - penalty: 10
      text: Is there anything useful in the env vars?
    - penalty: 10
      text: Those look like a host and password for a root SSH user!
    - penalty: 10
      text: I think Postgres doesn't need a password if you're reaching it from localhost.
    - penalty: 10
      text: I can use pg_dump get the data from the database.
    - penalty: 10
      text: I wonder if there are any mount points in this container.
    - penalty: 10
      text: Is there something there in /backups?
    - penalty: 10
      text: I have an IP and SSH key from the welcome text to this challenge, I can
        'scp' my data to there.
    sortOrder: 1
    startingPoint:
      mode: pod
      podName: frontend
      podNamespace: network-hammer-and-anvil
    summary: We SSH'd into a sidecar container of a database pod after finding some
      credentials in our starting pod. From there we accessed the database directly
      and through a shared mount to exfiltrate some secret data.
  "2":
    hints:
    - penalty: 10
      text: The database shouldn't need to talk externally.
    - penalty: 10
      text: Only the frontend should have access to the database.
    - penalty: 10
      text: I wonder if a network policy would help here.
    sortOrder: 2
    startingPoint:
      kubectlAccess: true
      mode: internal-instance
    summary: We used a network policy to prevent the database from exfiltrating data
      and preventing SSH into the sidecar container.
